//
// Created by Jaka Cikac on 06/05/16.
//

#ifndef HEALPIXVIEWER_HEALPIXVIEWER_H

    #define HEALPIXVIEWER_HEALPIXVIEWER_H

#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <chealpix.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <iostream>

using namespace std;

#define GLSL(source) "#version 330\n" #source

static const float base_tile_xys[12][2] = {
        /* face  0 */ {0.25, 0},
        /* face  1 */ {0.75, 0},
        /* face  2 */ {1.25, 0},
        /* face  3 */ {1.75, 0},
        /* face  4 */ {0, -0.25},
        /* face  5 */ {0.5, -0.25},
        /* face  6 */ {1, -0.25},
        /* face  7 */ {1.5, -0.25},
        /* face  8 */ {0.25, -0.5},
        /* face  9 */ {0.75, -0.5},
        /* face 10 */ {1.25, -0.5},
        /* face 11 */ {1.75, -0.5}
};

static const GLubyte colormap[][4] = {
        /* Jet */
        {0, 0, 128, 255},
        {0, 0, 132, 255},
        {0, 0, 137, 255},
        {0, 0, 141, 255},
        {0, 0, 146, 255},
        {0, 0, 150, 255},
        {0, 0, 155, 255},
        {0, 0, 159, 255},
        {0, 0, 164, 255},
        {0, 0, 168, 255},
        {0, 0, 173, 255},
        {0, 0, 178, 255},
        {0, 0, 182, 255},
        {0, 0, 187, 255},
        {0, 0, 191, 255},
        {0, 0, 196, 255},
        {0, 0, 200, 255},
        {0, 0, 205, 255},
        {0, 0, 209, 255},
        {0, 0, 214, 255},
        {0, 0, 218, 255},
        {0, 0, 223, 255},
        {0, 0, 227, 255},
        {0, 0, 232, 255},
        {0, 0, 237, 255},
        {0, 0, 241, 255},
        {0, 0, 246, 255},
        {0, 0, 250, 255},
        {0, 0, 255, 255},
        {0, 0, 255, 255},
        {0, 0, 255, 255},
        {0, 0, 255, 255},
        {0, 1, 255, 255},
        {0, 4, 255, 255},
        {0, 9, 255, 255},
        {0, 13, 255, 255},
        {0, 17, 255, 255},
        {0, 20, 255, 255},
        {0, 25, 255, 255},
        {0, 29, 255, 255},
        {0, 33, 255, 255},
        {0, 36, 255, 255},
        {0, 41, 255, 255},
        {0, 45, 255, 255},
        {0, 49, 255, 255},
        {0, 52, 255, 255},
        {0, 57, 255, 255},
        {0, 61, 255, 255},
        {0, 65, 255, 255},
        {0, 68, 255, 255},
        {0, 73, 255, 255},
        {0, 77, 255, 255},
        {0, 81, 255, 255},
        {0, 84, 255, 255},
        {0, 89, 255, 255},
        {0, 93, 255, 255},
        {0, 97, 255, 255},
        {0, 100, 255, 255},
        {0, 105, 255, 255},
        {0, 109, 255, 255},
        {0, 113, 255, 255},
        {0, 116, 255, 255},
        {0, 121, 255, 255},
        {0, 125, 255, 255},
        {0, 129, 255, 255},
        {0, 133, 255, 255},
        {0, 136, 255, 255},
        {0, 141, 255, 255},
        {0, 145, 255, 255},
        {0, 149, 255, 255},
        {0, 153, 255, 255},
        {0, 157, 255, 255},
        {0, 161, 255, 255},
        {0, 165, 255, 255},
        {0, 168, 255, 255},
        {0, 173, 255, 255},
        {0, 177, 255, 255},
        {0, 181, 255, 255},
        {0, 185, 255, 255},
        {0, 189, 255, 255},
        {0, 193, 255, 255},
        {0, 197, 255, 255},
        {0, 200, 255, 255},
        {0, 205, 255, 255},
        {0, 209, 255, 255},
        {0, 213, 255, 255},
        {0, 217, 255, 255},
        {0, 221, 254, 255},
        {0, 225, 251, 255},
        {0, 229, 248, 255},
        {2, 232, 244, 255},
        {6, 237, 241, 255},
        {9, 241, 238, 255},
        {12, 245, 235, 255},
        {15, 249, 231, 255},
        {19, 253, 228, 255},
        {22, 255, 225, 255},
        {25, 255, 222, 255},
        {28, 255, 219, 255},
        {31, 255, 215, 255},
        {35, 255, 212, 255},
        {38, 255, 209, 255},
        {41, 255, 206, 255},
        {44, 255, 202, 255},
        {48, 255, 199, 255},
        {51, 255, 196, 255},
        {54, 255, 193, 255},
        {57, 255, 190, 255},
        {60, 255, 186, 255},
        {64, 255, 183, 255},
        {67, 255, 180, 255},
        {70, 255, 177, 255},
        {73, 255, 173, 255},
        {77, 255, 170, 255},
        {80, 255, 167, 255},
        {83, 255, 164, 255},
        {86, 255, 160, 255},
        {90, 255, 157, 255},
        {93, 255, 154, 255},
        {96, 255, 151, 255},
        {99, 255, 148, 255},
        {102, 255, 144, 255},
        {106, 255, 141, 255},
        {109, 255, 138, 255},
        {112, 255, 135, 255},
        {115, 255, 131, 255},
        {119, 255, 128, 255},
        {122, 255, 125, 255},
        {125, 255, 122, 255},
        {128, 255, 119, 255},
        {131, 255, 115, 255},
        {135, 255, 112, 255},
        {138, 255, 109, 255},
        {141, 255, 106, 255},
        {144, 255, 102, 255},
        {148, 255, 99, 255},
        {151, 255, 96, 255},
        {154, 255, 93, 255},
        {157, 255, 90, 255},
        {160, 255, 86, 255},
        {164, 255, 83, 255},
        {167, 255, 80, 255},
        {170, 255, 77, 255},
        {173, 255, 73, 255},
        {177, 255, 70, 255},
        {180, 255, 67, 255},
        {183, 255, 64, 255},
        {186, 255, 60, 255},
        {190, 255, 57, 255},
        {193, 255, 54, 255},
        {196, 255, 51, 255},
        {199, 255, 48, 255},
        {202, 255, 44, 255},
        {206, 255, 41, 255},
        {209, 255, 38, 255},
        {212, 255, 35, 255},
        {215, 255, 31, 255},
        {219, 255, 28, 255},
        {222, 255, 25, 255},
        {225, 255, 22, 255},
        {228, 255, 19, 255},
        {231, 255, 15, 255},
        {235, 255, 12, 255},
        {238, 255, 9, 255},
        {241, 252, 6, 255},
        {244, 248, 2, 255},
        {248, 245, 0, 255},
        {251, 241, 0, 255},
        {254, 237, 0, 255},
        {255, 234, 0, 255},
        {255, 230, 0, 255},
        {255, 226, 0, 255},
        {255, 222, 0, 255},
        {255, 219, 0, 255},
        {255, 215, 0, 255},
        {255, 211, 0, 255},
        {255, 208, 0, 255},
        {255, 204, 0, 255},
        {255, 200, 0, 255},
        {255, 196, 0, 255},
        {255, 193, 0, 255},
        {255, 189, 0, 255},
        {255, 185, 0, 255},
        {255, 182, 0, 255},
        {255, 178, 0, 255},
        {255, 174, 0, 255},
        {255, 171, 0, 255},
        {255, 167, 0, 255},
        {255, 163, 0, 255},
        {255, 159, 0, 255},
        {255, 156, 0, 255},
        {255, 152, 0, 255},
        {255, 148, 0, 255},
        {255, 145, 0, 255},
        {255, 141, 0, 255},
        {255, 137, 0, 255},
        {255, 134, 0, 255},
        {255, 130, 0, 255},
        {255, 126, 0, 255},
        {255, 122, 0, 255},
        {255, 119, 0, 255},
        {255, 115, 0, 255},
        {255, 111, 0, 255},
        {255, 108, 0, 255},
        {255, 104, 0, 255},
        {255, 100, 0, 255},
        {255, 96, 0, 255},
        {255, 93, 0, 255},
        {255, 89, 0, 255},
        {255, 85, 0, 255},
        {255, 82, 0, 255},
        {255, 78, 0, 255},
        {255, 74, 0, 255},
        {255, 71, 0, 255},
        {255, 67, 0, 255},
        {255, 63, 0, 255},
        {255, 59, 0, 255},
        {255, 56, 0, 255},
        {255, 52, 0, 255},
        {255, 48, 0, 255},
        {255, 45, 0, 255},
        {255, 41, 0, 255},
        {255, 37, 0, 255},
        {255, 34, 0, 255},
        {255, 30, 0, 255},
        {255, 26, 0, 255},
        {255, 22, 0, 255},
        {255, 19, 0, 255},
        {250, 15, 0, 255},
        {246, 11, 0, 255},
        {241, 8, 0, 255},
        {237, 4, 0, 255},
        {232, 0, 0, 255},
        {228, 0, 0, 255},
        {223, 0, 0, 255},
        {218, 0, 0, 255},
        {214, 0, 0, 255},
        {209, 0, 0, 255},
        {205, 0, 0, 255},
        {200, 0, 0, 255},
        {196, 0, 0, 255},
        {191, 0, 0, 255},
        {187, 0, 0, 255},
        {182, 0, 0, 255},
        {178, 0, 0, 255},
        {173, 0, 0, 255},
        {168, 0, 0, 255},
        {164, 0, 0, 255},
        {159, 0, 0, 255},
        {155, 0, 0, 255},
        {150, 0, 0, 255},
        {146, 0, 0, 255},
        {141, 0, 0, 255},
        {137, 0, 0, 255},
        {132, 0, 0, 255},
        {128, 0, 0, 255}
};

static const char * vertex_shader_source = GLSL(
        in vec3 position;
        in vec2 datacoord;

        uniform mat4 proj;
        uniform mat4 view;
        uniform mat4 model;

        out vec2 Datacoord;
        out float lum;

        void main(void) {
            vec4 normal_cam = view * model * vec4(position, 0);
            lum = 0.25+normalize(normal_cam).z;
            gl_Position = proj * view * model * vec4(position, 1);
            Datacoord = datacoord;
        }
);

static const char * fragment_shader_source = GLSL(
        in vec2 Datacoord;
        in float lum;

        uniform sampler2D datamap;
        uniform sampler1D colormap;

        out vec4 outcolor;

        void main(void) {
            outcolor = lum * texture(colormap, texture(datamap, Datacoord).r);
        }
);

GLuint LoadShaders(const char * vertex_source, const char * fragment_source) {

    /* Compile shaders */
    GLuint vertex_shader = glCreateShader(GL_VERTEX_SHADER);
    GLuint fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);
    {
        GLint status;

        glShaderSource(vertex_shader, 1, &vertex_shader_source, NULL);
        glCompileShader(vertex_shader);
        glGetShaderiv(vertex_shader, GL_COMPILE_STATUS, &status);
        if (status != GL_TRUE)
        {
            char buffer[512];
            glGetShaderInfoLog(vertex_shader, sizeof(buffer), NULL, buffer);
            fprintf(stderr, "error compiling vertex shader: %s\n", buffer);
            exit(EXIT_FAILURE);
        }

        glShaderSource(fragment_shader, 1, &fragment_shader_source, NULL);
        glCompileShader(fragment_shader);
        glGetShaderiv(fragment_shader, GL_COMPILE_STATUS, &status);
        if (status != GL_TRUE)
        {
            char buffer[512];
            glGetShaderInfoLog(fragment_shader, sizeof(buffer), NULL, buffer);
            fprintf(stderr, "error compiling fragment shader: %s\n", buffer);
            exit(EXIT_FAILURE);
        }
    }

    /* Link shaders */
    GLuint shader_program = glCreateProgram();
    glAttachShader(shader_program, vertex_shader);
    glAttachShader(shader_program, fragment_shader);
    glBindFragDataLocation(shader_program, 0, "outcolor");
    glLinkProgram(shader_program);

    return shader_program;
}